type User {
  id: Int!
  name: String!
  lastName: String!
  patronymic: String!
  password: String!
  email: String!
  phoneNumber: String!
  age: Int!
  avatarUrl: String
  dateOfCreation: String
  userRate: Float!
  balance: Float!
  role: String!
  classId: Int!
  class: Class
  login: String
}

type SecureUser {
  id: Int!
  role: Role!
}

type Token {
  token: String!
}

type Class {
  id: Int!
  number: Int!
  letter: String!
  classRate: Float!
}

type Complex {
  id: Int!
  orders: [Int!]!
  dateOfCreation: String
}

type ComplexCallback {
  isCurrentWeek: Boolean!
  isEditable: Boolean!
  complex: Complex!
}

type Role {
  id: Int!
  role: String!

  users: [User]
}

input LoginUser {
  login: String!
  password: String!
}

input NewUser {
  name: String
  lastName: String
  patronymic: String
  password: String
  email: String
  phoneNumber: String
  age: Int
  avatarUrl: String
  userRate: Float
  roleId: Int!
  classId: Int!
  balance: Float!
  login: String
}

input NewClass {
  number: Int!
  letter: String!
  classRate: Float!
}

input NewComplex {
  mo: Int!
  tu: Int!
  we: Int!
  th: Int!
  fr: Int!
}

input NewRole {
  name: String!
}

type Query {
  users: [User!]!
  user(id: Int!): User
  me: User!

  classes: [Class!]!
  class(id: Int!): Class
  myClass: Class!

  validUser: Boolean!

  getComplexesByUserId: [Complex!]!

  role(id: Int!): Role!

  complexesList: String!

  canEditComplex: Boolean!

  getBackComplex(i: Int!): Complex!

  getBalanceById(id: Int): Float!
  getMyBalance: Float!
  getActualComplex: String!
}

type Mutation {
  createUser(input: NewUser): User!
  createClass(input: NewClass): Class!
  registerUser(input: NewUser): User!
  loginUser(input: LoginUser): Token!
  createComplex(id: Int, input: NewComplex, date: String): Complex!
  createRole(input: NewRole): Role!
  changePassword(lastPass: String, newPass: String): String
  changeComplex(input: NewComplex): ComplexCallback!
  setBalance(id: Int, newBalance: Float): Float!
  changePasswordAdmin(lastPass: String, newPass: String, userId: Int): String
}
