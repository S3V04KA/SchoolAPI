type User {
  id: Int!
  name: String!
  lastName: String!
  patronymic: String!
  password: String!
  email: String!
  phoneNumber: String!
  age: Int!
  avatarUrl: String
  dateOfCreation: String
  userRate: Float!
  balance: Float!
  role: String!
  classId: Int!
  class: Class
  login: String
}

type SecureUser {
  id: Int!
  role: Role!
}

type Token {
  token: String!
}

type Class {
  id: Int!
  number: Int!
  letter: String!
  classRate: Float!
}

type Category {
  id: Int
  name: String
  products: [Product]
}

input NewCategory {
  name: String!
  productIds: [Int]
}

type Product {
  id: Int
  photoUrl: String
  categorys: [Category]
  name: String
  weight: Float
  price: Float
  isComplex: Boolean
  hidden: Boolean
  calories: Int
  fats: Int
  carbohydrates: Int
  proteins: Int
  complexModels: [ComplexModel]
}

input NewProduct {
  photoUrl: String
  categoryIds: [Int]
  name: String
  weight: Float
  price: Float
  isComplex: Boolean
  hidden: Boolean
  calories: Int
  fats: Int
  carbohydrates: Int
  proteins: Int
}

input NewComplexModel {
  hide: Boolean
  productIds: [Int]
}

type ComplexModel {
  id: Int
  hide: Boolean
  products: [Product]
  Complex: Complex
}

type Complex {
  id: Int
  complexModels: [ComplexModel]
  dateOfCreation: String
}

type ComplexCallback {
  isCurrentWeek: Boolean!
  isEditable: Boolean!
  complex: Complex!
}

type Role {
  id: Int!
  role: String!

  users: [User]
}

input LoginUser {
  login: String!
  password: String!
}

input NewUser {
  name: String
  lastName: String
  patronymic: String
  password: String
  email: String
  phoneNumber: String
  age: Int
  avatarUrl: String
  userRate: Float
  roleId: Int!
  classId: Int!
  balance: Float!
  login: String
}

input NewClass {
  number: Int!
  letter: String!
  classRate: Float!
}

input NewComplex {
  moId: Int!
  tuId: Int!
  weId: Int!
  thId: Int!
  frId: Int!
}

input NewRole {
  name: String!
}

type Query {
  users: [User!]!
  user(id: Int!): User
  me: User!

  classes: [Class!]!
  class(id: Int!): Class
  myClass: Class!

  validUser: Boolean!

  getComplexesByUserId: [Complex!]!

  role(id: Int!): Role!

  complexesList: String!

  canEditComplex: Boolean!

  getBackComplex(i: Int!): Complex!

  getBalanceById(id: Int): Float!
  getMyBalance: Float!
  getActualComplex: String!

  categoryes: [Category]
  category(id: Int!): Category

  product(id: Int!): Product
  products: [Product]

  complexModel(id: Int!): ComplexModel
  complexModels: [ComplexModel]

  complex(id: Int!): Complex
  complexs: [Complex]
}

type Mutation {
  createUser(input: NewUser): User!
  createClass(input: NewClass): Class!
  registerUser(input: NewUser): User!
  loginUser(input: LoginUser): Token!
  createComplex(input: NewComplex, date: String): Complex!
  createRole(input: NewRole): Role!
  changePassword(lastPass: String, newPass: String): String
  changeComplex(input: NewComplex): ComplexCallback!
  setBalance(id: Int, newBalance: Float): Float!
  changePasswordAdmin(lastPass: String, newPass: String, userId: Int): String
  createCategory(input: NewCategory): Category!
  createProduct(input: NewProduct): Product
  createComplexModel(input: NewComplexModel): ComplexModel
}
